let
  class B (f:int, b:bool) {
    fun test:bool() b; 
  }
  var s:B = new B(1,true);
in  
  print ( 
    if s.test()
      then { 1 }
      else { 2 }
  ); 

push 0 [0]

ClassB 
lhp [0,0], heap []
lw  [0,0]

dispatchTable_B
push function0 [f0,0,0]
lhp [0,f0,0,0]
sw heap[0]=f0 [0,0], heap [f0]

incrementHP
push 1
lhp
add
shp HP=1 [0,0], mem [f0,...]


DecList

NewNode

Parlist
push 1 = ParCode_1 (int:1)
push 1 = ParCode_2 (bool:true) 
//[1,1,0,0] heap [f0], HP=1

ParHPCode_1 (Scrivo int:1 su Heap)
lhp [1,1,1,0,0]
sw mem[1] = 1. [1,0,0] , heap [f0,1]

IncrementHP
push 1
lhp
add
shp HP = 2 [1,0,0] , heap [f0,1]

ParHPCode_2 (Scrivo bool:true (1) su Heap)
lhp [2,1,0,0]
sw [0,0], heap[f0,1,1]

IncrementHP
push 1
lhp
add
shp HP = 3 [0,0], heap[f0,1,1]

Push MEMSIZE + Offset per ottenere indirizzo del dispatchPointer 
push 998 [998,0,0]
lw [0,0,0]

Scrivo su Heap il dispatchPointer
lhp [3,0,0,0]
sw [0,0], heap[f0,1,1,0]

Lascio $HP su stack
lhp [3,0,0], heap[f0,1,1,0]

IncrementHP
push 1
lhp
add
shp
HP=4

expCodeGen
print ( => print alla fine
if s.test() => cond.codeGeneration prima
then { 1 }
else { 2 }
);
 
ClassCallNode
lfp [0,3,0,0], heap[f0,1,1,0]

getAr (non c'è perché nestingLevel=entry.NestingLevel)""
""

push 0 (methodOffset) [0,0,3,0,0]
lfp [0,0,0,3,0,0]

getAr (non c'è perché nestingLevel=entry.NestingLevel)
""
add (somma fp a offset) [0,0,3,0,0]
sw (setta a mem[offset] = [3,0,0], heap[0,1,1,0]

IfNode (se stack = 1 allora la cond è true e va nel primo branch)
push 1 [1,3,0,0], heap[0,1,1,0]
beq label0
push 2
b label1
label0: 
push 1
label1: 
print
halt


MethodNode.putCode()
function0:
cfp
lra
push -2
lfp
lw
add
lw
srv
sra
pop
sfp
lrv
lra
js
