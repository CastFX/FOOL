let
	class A (x:int, y:int) {
		fun getX:int() x;
  		fun getY:int() y;
  	}
	
	fun g:int(x:(int,int)->int)
		x(5,7);
	fun linsum:int(a:int,b:int)
		(a+b);

	var a:A = new A(2,3);
in
print(if false 
	  then{g(linsum)}
	  else{linsum(3,4)}
	  );

/* Serbatoio Esempi

//LINSUM (WORKS)
let
	fun g:int(x:(int,int)->int)
		x(5,7);
	fun f:int(c:int)
		let
			fun linsum:int(a:int,b:int)
				(a+b)*c;
		in
			g(linsum);
in
print(f(2));

-------------------------------------------

//LINSUM BUT INSTEAD OF INT I RETURN A SUBTYPE OF INT TO CHECK COVARIANCE. OK
let
	fun g:int(x:(int,int)->int) /*Request a Int in return*/
		x(5,7);
	fun f:int(c:int)
		let
			fun linsum:int(a:int,b:int)
				true; /*Return a boolean that is subtype of Int*/
		in
			g(linsum);
in
print(f(2));
-------------------------------------------

//LINSUM BUT TRYING TO PASS WRONG PARAMETERS THAT ARE NOT SUBTYPES (Anti-Covariance not respected), SHOULD NOT WORK. OK
let
	fun g:int(x:(int,int)->int) /*Request int parameters*/
		x(5,7);
	fun f:int(c:int)
		let
			fun linsum:int(a:bool,b:bool) /*Gives boolean parameters, wrong*/
				(a+b)*c;
		in
			g(linsum);
in
print(f(2));

--------------------------------------------

//LINSUM BUT USING SUBTYPES IN PARAMETERS TO CHECK ANTI-COVARIACE. OK
let
	fun g:int(x:(bool,bool)->int)
		x(true,true);
	fun f:int(c:int)
		let
			fun linsum:int(a:int,b:int)
				(a+b)*c;
		in
			g(linsum);
in
print(f(2));
-------------------------------------------

//LINSUM BUT TRYING TO PASS WRONG RETURN TYPES THAT ARE NOT SUBTYPES (Covariance not respected), SHOULD NOT WORK. OK
let
	fun g:bool(x:(int,int)->bool) /*returns a boolean*/
		x(5,7);
	fun f:int(c:int)
		let
			fun linsum:int(a:int,b:int) /*Returns a int, that is not subtype of Boolean*/
				(a+b)*c;
		in
			g(linsum);
in
print(f(2));

-------------------------------------------
//Invalide use of functional types on equals. SHOULD NOT WORK. OK.
let	
	fun f:int(x:(int,int)->int, y:int) 
		x(2,3)+y;
	fun g:int(a:int, b:int) a+b;
in
	f==g;

-------------------------------------------
//Invocation of a non-function a. SHOULD NOT WORK. OK.
let	
	fun f:int(x:(int,int)->int, y:int) 
		x(2,3)+y;
	fun g:int(a:int, b:int) a+b;
	var a:int = 3;
in
print(a());
------------------------------------------
//Incompatible types in then-else branches. SHOULD NOT WORK. OK.
let
	class A() {}
	class B() {}
	fun f:int(x:(int, A)->int) 3;
	fun g:int(y:(int, B)->int) 4;
in
	print(
		if true
	  		then{f}
	  		else{g}
	);
--------------------------------------------
//Types with extends. OK.
let
	class A() {}
	class B extends A() {}
	class D extends B() {}
	class C extends D() {}
	class E extends C() {}
	
	fun f:int(x:(int, A)->int) 3;
	fun g:int(y:(int, E)->int) 4;
	
	
in
	print(
		if true
	  		then{f}
	  		else{g}
	);
*/